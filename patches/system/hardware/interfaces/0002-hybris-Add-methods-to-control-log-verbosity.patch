From 7ccd85519a88e451014319e7c3f1d6f184953282 Mon Sep 17 00:00:00 2001
From: Rinigus <rinigus.git@gmail.com>
Date: Sat, 11 Oct 2025 20:53:07 +0300
Subject: [PATCH 2/3] [hybris] Add methods to control log verbosity

Change-Id: Ib9893724edbb0720df5b31f649e824e65afd82d9
---
 suspend/1.0/default/SuspendControlService.cpp | 22 ++++++++++++++++++
 suspend/1.0/default/SuspendControlService.h   |  2 ++
 suspend/1.0/default/SystemSuspend.cpp         | 23 +++++++++++++++++++
 suspend/1.0/default/SystemSuspend.h           |  3 +++
 .../ISuspendControlServiceInternal.aidl       | 14 +++++++++++
 5 files changed, 64 insertions(+)

diff --git a/suspend/1.0/default/SuspendControlService.cpp b/suspend/1.0/default/SuspendControlService.cpp
index 6529a92..03acd68 100644
--- a/suspend/1.0/default/SuspendControlService.cpp
+++ b/suspend/1.0/default/SuspendControlService.cpp
@@ -168,6 +168,28 @@ binder::Status SuspendControlServiceInternal::disableAutosuspend(bool* _aidl_ret
     return binder::Status::ok();
 }
 
+binder::Status SuspendControlServiceInternal::enableVerbose(bool* _aidl_return) {
+    const auto suspendService = mSuspend.promote();
+    if (suspendService) {
+        suspendService->enableVerbose();
+        *_aidl_return = true;
+    } else {
+        *_aidl_return = false;
+    }
+    return binder::Status::ok();
+}
+
+binder::Status SuspendControlServiceInternal::disableVerbose(bool* _aidl_return) {
+    const auto suspendService = mSuspend.promote();
+    if (suspendService) {
+        suspendService->disableVerbose();
+        *_aidl_return = true;
+    } else {
+        *_aidl_return = false;
+    }
+    return binder::Status::ok();
+}
+
 binder::Status SuspendControlServiceInternal::forceSuspend(bool* _aidl_return) {
     const auto suspendService = mSuspend.promote();
     return retOk(suspendService != nullptr && suspendService->forceSuspend(), _aidl_return);
diff --git a/suspend/1.0/default/SuspendControlService.h b/suspend/1.0/default/SuspendControlService.h
index b40cce4..076d86f 100644
--- a/suspend/1.0/default/SuspendControlService.h
+++ b/suspend/1.0/default/SuspendControlService.h
@@ -73,6 +73,8 @@ class SuspendControlServiceInternal : public BnSuspendControlServiceInternal {
 
     binder::Status enableAutosuspend(bool* _aidl_return) override;
     binder::Status disableAutosuspend(bool* _aidl_return) override;
+    binder::Status enableVerbose(bool* _aidl_return) override;
+    binder::Status disableVerbose(bool* _aidl_return) override;
     binder::Status forceSuspend(bool* _aidl_return) override;
     binder::Status getSuspendStats(SuspendInfo* _aidl_return) override;
     binder::Status getWakeLockStats(std::vector<WakeLockInfo>* _aidl_return) override;
diff --git a/suspend/1.0/default/SystemSuspend.cpp b/suspend/1.0/default/SystemSuspend.cpp
index aac3c36..943edda 100644
--- a/suspend/1.0/default/SystemSuspend.cpp
+++ b/suspend/1.0/default/SystemSuspend.cpp
@@ -208,6 +208,17 @@ void SystemSuspend::disableAutosuspend() {
     disableAutosuspendLocked();
 }
 
+void SystemSuspend::enableVerbose() {
+    auto l = std::lock_guard(mAutosuspendLock); // for mSuspendCounter
+    mVerboseLogging = true;
+    LOG(INFO) << "verbose logging enabled, current mSuspendCounter = " << mSuspendCounter;
+}
+
+void SystemSuspend::disableVerbose() {
+    mVerboseLogging = false;
+    LOG(INFO) << "verbose logging disabled";
+}
+
 
 
 SystemSuspend::~SystemSuspend(void) {
@@ -246,10 +257,16 @@ void SystemSuspend::incSuspendCounter(const string& name) {
     auto l = std::lock_guard(mAutosuspendLock);
     if (mUseSuspendCounter) {
         mSuspendCounter++;
+        if (mVerboseLogging) {
+            LOG(INFO) << "Suspend counter inc: name='" << name << "' useSuspendCounter=" << mUseSuspendCounter << " counter=" << mSuspendCounter;
+        }
     } else {
         if (!WriteStringToFd(name, mWakeLockFd)) {
             PLOG(ERROR) << "error writing " << name << " to " << kSysPowerWakeLock;
         }
+        if (mVerboseLogging) {
+            LOG(INFO) << "Kernel wakelock inc: name='" << name << "'";
+        }
     }
 }
 
@@ -259,10 +276,16 @@ void SystemSuspend::decSuspendCounter(const string& name) {
         if (--mSuspendCounter == 0) {
             mAutosuspendCondVar.notify_one();
         }
+        if (mVerboseLogging) {
+            LOG(INFO) << "Suspend counter dec: name='" << name << "' useSuspendCounter=" << mUseSuspendCounter << " counter=" << mSuspendCounter;
+        }
     } else {
         if (!WriteStringToFd(name, mWakeUnlockFd)) {
             PLOG(ERROR) << "error writing " << name << " to " << kSysPowerWakeUnlock;
         }
+        if (mVerboseLogging) {
+            LOG(INFO) << "Kernel wakelock dec: name='" << name << "'";
+        }
     }
 }
 
diff --git a/suspend/1.0/default/SystemSuspend.h b/suspend/1.0/default/SystemSuspend.h
index 37a46eb..3296232 100644
--- a/suspend/1.0/default/SystemSuspend.h
+++ b/suspend/1.0/default/SystemSuspend.h
@@ -86,6 +86,8 @@ class SystemSuspend : public RefBase {
     void decSuspendCounter(const std::string& name);
     bool enableAutosuspend();
     void disableAutosuspend();
+    void enableVerbose();
+    void disableVerbose();
     bool forceSuspend();
 
     const WakeupList& getWakeupList() const;
@@ -113,6 +115,7 @@ class SystemSuspend : public RefBase {
 
     std::atomic<bool> mAutosuspendEnabled GUARDED_BY(mAutosuspendLock){false};
     std::atomic<bool> mAutosuspendThreadCreated GUARDED_BY(mAutosuspendLock){false};
+    std::atomic<bool> mVerboseLogging{false};
 
     unique_fd mWakeupCountFd;
     unique_fd mStateFd;
diff --git a/suspend/aidl/android/system/suspend/internal/ISuspendControlServiceInternal.aidl b/suspend/aidl/android/system/suspend/internal/ISuspendControlServiceInternal.aidl
index 2d9916f..ee3b8a3 100644
--- a/suspend/aidl/android/system/suspend/internal/ISuspendControlServiceInternal.aidl
+++ b/suspend/aidl/android/system/suspend/internal/ISuspendControlServiceInternal.aidl
@@ -40,6 +40,20 @@ interface ISuspendControlServiceInternal {
      */
     boolean disableAutosuspend();
 
+    /**
+     * Enables verbose logging for suspend counter operations.
+     *
+     * @return true on success, false otherwise.
+     */
+    boolean enableVerbose();
+
+    /**
+     * Disables verbose logging for suspend counter operations.
+     *
+     * @return true on success, false otherwise.
+     */
+    boolean disableVerbose();
+
     /**
      * Suspends the system even if there are wakelocks being held.
      */
-- 
2.25.1

